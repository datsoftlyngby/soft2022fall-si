package dk.dd.grpcexam.domain.service;

import dk.dd.grpcexam.dao.ExamDAO;
import dk.dd.grpcexam.domain.entity.Exam;

import dk.dd.grpcexam.stubs.exam.ExamRequest;
import dk.dd.grpcexam.stubs.exam.ExamResponse;
import dk.dd.grpcexam.stubs.exam.ExamServiceGrpc;
import dk.dd.grpcexam.stubs.exam.Grade;
import io.grpc.Status;
import org.springframework.stereotype.Service;

import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;

@Service
public class ExamService<StreamObserver> extends ExamServiceGrpc.ExamServiceImplBase
{
      // ExamDAO instance gets access to the Exam database
      private ExamDAO examDao = new ExamDAO();
      
      private static final Logger logger = Logger.getLogger(ExamService.class.getName());
      
      // Here we override the getExamForStudent() operation initially defined in the ExamProto and autogenerated in examService class
      // The operation gets id as an input and returns theexam data fot this student id as a response
      @Override
      public void getExamForStudent(ExamRequest request, io.grpc.stub.StreamObserver<ExamResponse> responseObserver)
      {
            // student ID is passed as a parameter of the request message
            String id = request.getId();
            try
            {
                  Exam exam = examDao.findById(id);
                  logger.log(Level.INFO, "REQUEST for STUDENT ID :- " + id);
                  
                 // gRPC provides a builder for response messages
                  ExamResponse response = ExamResponse.newBuilder()
                          .setId(id)
                          .setSi(Grade.valueOf(exam.getSi()))
                          .setDls(Grade.valueOf(exam.getDls()))
                          .setTst(Grade.valueOf(exam.getTst()))
                          .build();
                  
                  responseObserver.onNext(response);
                  responseObserver.onCompleted();
                  
            }
            catch (NoSuchElementException e)
            {
                  logger.log(Level.SEVERE, "NO exam FOUND WITH THE STUDENT ID :- " + id);
                  responseObserver.onError(Status.NOT_FOUND.asRuntimeException());
            }
      }
}
